"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// This unicode emojis also work for old versions of bitbucket server, were emojis are not supported
var noEntryEmoji = "\u274C";
var warningEmoji = "⚠️";
var messageEmoji = "\u2728";
/**
 * Converts a set of violations into a Markdown section
 *
 * @param {string} name User facing title of section
 * @param {string} emoji Emoji name to show
 * @param {Violation[]} violations for section
 * @returns {string} Markdown
 */
function resultsSection(name, emoji, violations) {
    if (violations.length === 0 || violations.every(function (violation) { return !violation.message; })) {
        return "";
    }
    return ("\n" +
        ("| " + emoji + " | " + name + "\n") +
        "| --- | --- |\n" +
        "\n" +
        violations
            .map(function (v) {
            return ("> " +
                v.message
                    .replace(/<\/?code>/g, "`")
                    .split("\n")
                    .join("\n> "));
        })
            .join("\n\n") +
        "\n");
}
exports.dangerIDToString = function (id) { return "danger-id-" + id + ";"; };
exports.fileLineToString = function (file, line) { return "  File: " + file + ";\n  Line: " + line + ";"; };
/**
 * Postfix signature to be attached comment generated / updated by danger.
 */
exports.dangerSignaturePostfix = "\n|    |\n|---:|\n| _Generated by " + noEntryEmoji + " [dangerJS](http://github.com/danger/danger-js/)_ |\n";
/**
 * Comment to add when updating the PR status when issues are found
 */
exports.messageForResultWithIssues = warningEmoji + " Danger found some issues. Don't worry, everything is fixable.";
/**
 * A template function for creating a GitHub issue comment from Danger Results
 * @param {string} dangerID A string that represents a unique build
 * @param {DangerResults} results Data to work with
 * @returns {string} HTML
 */
function template(dangerID, results) {
    return "\n" + resultsSection("Fails", noEntryEmoji, results.fails) + "\n" + resultsSection("Warnings", warningEmoji, results.warnings) + "\n" + resultsSection("Messages", messageEmoji, results.messages) + "\n\n" + results.markdowns.map(function (v) { return v.message; }).join("\n\n") + "\n\n" + exports.dangerSignaturePostfix + "\n\n[](http://" + exports.dangerIDToString(dangerID) + ")\n";
}
exports.template = template;
function inlineTemplate(dangerID, results, file, line) {
    var printViolation = function (emoji) { return function (violation) {
        return "- " + emoji + " " + violation.message;
    }; };
    return "\n[//]: # (" + exports.dangerIDToString(dangerID) + ")\n[//]: # (" + exports.fileLineToString(file, line) + ")\n" + results.fails.map(printViolation(noEntryEmoji)).join("\n") + "\n" + results.warnings.map(printViolation(warningEmoji)).join("\n") + "\n" + results.messages.map(printViolation(messageEmoji)).join("\n") + "\n" + results.markdowns.map(function (v) { return v.message; }).join("\n\n") + "\n  ";
}
exports.inlineTemplate = inlineTemplate;
//# sourceMappingURL=bitbucketServerTemplate.js.map